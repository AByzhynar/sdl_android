apply plugin: 'com.android.library'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.3'
    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 19
        versionCode 3
        versionName "4.7.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        resValue "string", "SDL_LIB_VERSION", '\"' + versionName + '\"'
        project.ext.set("archivesBaseName", "sdl_android-i-" + defaultConfig.versionName + "-" + project.version_number);
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = false //  disable testCoverage for importing aar.
        }
    }
    /*--
    flavorDimensions "oem", "region"
    productFlavors {
        toyota {
            dimension "oem"
        }
        lexus {
            dimension "oem"
        }
        daihatsu {
            dimension "oem"
        }
        suzuki {
            dimension "oem"
        }
        us {
            dimension "region"
        }
        row {
            dimension "region"
        }
        europe {
            dimension "region"
        }
        australia {
            dimension "region"
        }
        china {
            dimension "region"
        }
    } --*/
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    lintOptions {
        abortOnError false
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    /*--
    variantFilter { variant ->
        def name = variant.flavors*.name
        // Daihatsu and Suzuki have single region (=row)
        if (name.contains("daihatsu") || name.contains("suzuki")) {
            if (name.contains("us") || name.contains("europe") || name.contains("australia") || name.contains("china")) {
                setIgnore(true)
            }
        }
    } --*/
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile ('com.smartdevicelink:bson_java_port:1.0.0@aar'){
        transitive = true
    }
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.9.0'
    
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath 'com.trickyandroid:jacoco-everywhere:0.2.1'
    }
}

apply from: 'bintray.gradle'
apply plugin: 'jacoco-everywhere'